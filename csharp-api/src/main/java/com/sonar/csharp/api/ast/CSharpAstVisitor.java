/*
 * Copyright (C) 2010 SonarSource SA
 * All rights reserved
 * mailto:contact AT sonarsource DOT com
 */
package com.sonar.csharp.api.ast;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.sonar.squid.api.CodeVisitor;
import org.sonar.squid.api.SourceCode;

import com.sonar.csharp.api.CSharpGrammar;
import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.AstNodeType;
import com.sonar.sslr.api.AstVisitor;
import com.sonar.sslr.api.Comments;

/**
 * Base class to visit an AST (Abstract Syntactic Tree) generated by a parser.
 * 
 * Methods are visited in the following sequential order : init(), visitFile(), visitNode(), leaveNode(), leaveFile() and destroy()
 */
public abstract class CSharpAstVisitor implements CodeVisitor, AstVisitor {

  private Stack<SourceCode> physicalSourceCodeStack;
  private Stack<SourceCode> logicalSourceCodeStack;
  private SourceCode sourceProject;
  private CSharpGrammar grammar;

  private Comments comments;
  private File file;
  private List<AstNodeType> astNodeTypesToVisit = new ArrayList<AstNodeType>();

  /**
   * This method can't be overridden. The method subscribeTo(AstNodeType... astNodeTypes) must be used to while overriding the public void
   * init() method.
   */
  public final List<AstNodeType> getAstNodeTypesToVisit() {
    return astNodeTypesToVisit;
  }

  /**
   * This method must called into the init() method when a C# AST visitor wants to subscribe to a set of AST node type.
   */
  public final void subscribeTo(AstNodeType... astNodeTypes) {
    for (AstNodeType type : astNodeTypes) {
      astNodeTypesToVisit.add(type);
    }
  }

  public final void setSourceCodeStacks(Stack<SourceCode> physicalSourceCodeStack, Stack<SourceCode> logicalSourceCodeStack) {
    this.physicalSourceCodeStack = physicalSourceCodeStack;
    this.sourceProject = physicalSourceCodeStack.peek();
    this.logicalSourceCodeStack = logicalSourceCodeStack;
  }

  public final void setGrammar(CSharpGrammar grammar) {
    this.grammar = grammar;
  }

  public final void setComments(Comments comments) {
    this.comments = comments;
  }

  public final Comments getComments() {
    return comments;
  }

  public final void addPhysicalSourceCode(SourceCode child) {
    peekPhysicalSourceCode().addChild(child);
    physicalSourceCodeStack.add(child);
  }

  public final void popPhysicalSourceCode() {
    physicalSourceCodeStack.pop();
  }

  public final SourceCode peekPhysicalSourceCode() {
    return physicalSourceCodeStack.peek();
  }

  public final void addLogicalSourceCode(SourceCode child) {
    peekLogicalSourceCode().addChild(child);
    logicalSourceCodeStack.add(child);
  }

  public final void popLogicalSourceCode() {
    logicalSourceCodeStack.pop();
  }

  public final SourceCode peekLogicalSourceCode() {
    return logicalSourceCodeStack.peek();
  }

  /**
   * Initialize the visitor. This is the time to verify that the visitor has everything required to perform it job. This method is called
   * once.
   */
  public void init() {
  }

  /**
   * {@inheritDoc}
   */
  public void visitFile(AstNode astNode) {
  }

  /**
   * {@inheritDoc}
   */
  public void visitNode(AstNode astNode) {
  }

  /**
   * {@inheritDoc}
   */
  public void beforeLeaveFile(AstNode astNode) {
  }

  /**
   * {@inheritDoc}
   */
  public void leaveFile(AstNode astNode) {
  }

  /**
   * {@inheritDoc}
   */
  public void leaveNode(AstNode astNode) {
  }

  /**
   * Destroy the visitor. It is being retired from service.
   */
  public void destroy() {
  }

  public final void setFile(File file) {
    this.file = file;
  }

  public final File getFile() {
    return file;
  }

  protected final CSharpGrammar getCSharpGrammar() {
    return grammar;
  }

  protected SourceCode getSourceProject() {
    return sourceProject;
  }
}
